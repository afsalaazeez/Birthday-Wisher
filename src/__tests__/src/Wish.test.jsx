// ********RoostGPT********
// Test generated by RoostGPT for test react-tic using AI Type Open AI and AI Model gpt-4-1106-preview

// ********RoostGPT********
import React from "react";
import { render, screen } from "@testing-library/react";
import "@testing-library/jest-dom/extend-expect";
import Wish from "../Wish.jsx";

describe("Wish component tests", () => {
  // Test case 1: Component renders with a name passed as a prop
  test("renders the birthday wish with the name in uppercase", () => {
    render(<Wish name="John Doe" />);
    const wishElement = screen.getByText(/happy birthday john doe !!!/i);
    expect(wishElement).toBeInTheDocument();
    expect(wishElement).toHaveClass("wish-message");
    expect(wishElement.querySelector(".highlight")).toHaveTextContent(
      "JOHN DOE"
    );
  });

  // Test case 2: Component renders correctly when no name is passed
  test("renders the birthday wish without a name when no prop is provided", () => {
    render(<Wish />);
    const wishElement = screen.getByText(/happy birthday !!!/i);
    expect(wishElement).toBeInTheDocument();
    expect(wishElement.querySelector(".highlight")).toBeNull();
  });

  // Test case 3: Error handling when an object is passed instead of a string
  // Additional test cases could be written to handle other types of invalid props.
});

export default {};
