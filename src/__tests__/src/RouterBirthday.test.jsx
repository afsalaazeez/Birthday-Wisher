// ********RoostGPT********
// Test generated by RoostGPT for test react-tic using AI Type Open AI and AI Model gpt-4-1106-preview



// ********RoostGPT********
import React from 'react';
import { render } from '@testing-library/react';
import RouterBirthday from '../../RouterBirthday'; // Correct path relative to src/__tests__/src/
import Birthday from '../../Birthday'; // Mock dependency

// Mock the Birthday component to isolate the test
jest.mock('../../Birthday', () => (props) => <div data-testid="mock-birthday">Birthday Mock</div>);

describe('RouterBirthday', () => {
  const mockMatch = { params: { name: 'John', day: '01', month: '01' } };
  
  test('renders without crashing', () => {
    const { getByTestId } = render(<RouterBirthday match={mockMatch} />);
    expect(getByTestId('mock-birthday')).toBeInTheDocument();
  });

  test('passes correct props to Birthday component', () => {
    const { getByTestId } = render(<RouterBirthday match={mockMatch} />);
    const birthdayComponent = getByTestId('mock-birthday');
    
    expect(birthdayComponent).toHaveTextContent('Birthday Mock');
    expect(Birthday).toHaveBeenCalledWith({
        name: mockMatch.params.name,
        day: mockMatch.params.day,
        month: mockMatch.params.month
    }, {});
  });

  // You can add more tests to cover different scenarios, edge cases, and error handling.
});

