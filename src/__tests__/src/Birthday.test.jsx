// ********RoostGPT********
// Test generated by RoostGPT for test react-tic using AI Type Open AI and AI Model gpt-4-1106-preview



// ********RoostGPT********
import React from 'react';
import { render, cleanup, act } from '@testing-library/react';
import '@testing-library/jest-dom/extend-expect';
import Birthday from '../../Birthday';

// Jest mock for the setInterval and clearInterval to control timing
jest.useFakeTimers();

describe('Birthday Component', () => {
  // Clean up DOM after each test case.
  afterEach(cleanup);

  test('renders with default props when no props are provided', () => {
    // Arrange & Act
    const { getByText } = render(<Birthday />);

    // Assert
    expect(getByText(/deepankar/i)).toBeInTheDocument();
    expect(getByText(/days until your birthday/i)).toBeInTheDocument();
  });

  test('correctly calculates countdown based on provided props', () => {
    // Arrange
    const testDate = new Date();
    testDate.setDate(testDate.getDate() + 1);
    const day = testDate.getDate();
    const month = testDate.getMonth() + 1; // getMonth is zero-based in JavaScript.

    // Act
    const { getByText } = render(<Birthday name="John" day={day} month={month} />);
    
    act(() => {
      jest.advanceTimersByTime(1000); // fast-forward timer
    });

    // Assert
    expect(getByText(/1 days until your birthday/i)).toBeInTheDocument();
  });

  test('displays happy birthday message when it is the user\'s birthday', () => {
    // Arrange
    const birthday = new Date();
    const day = birthday.getDate();
    const month = birthday.getMonth() + 1; // getMonth is zero-based in JavaScript.

    // Act
    const { getByText } = render(<Birthday name="John" day={day} month={month} />);
    
    act(() => {
      jest.advanceTimersByTime(1000); // fast-forward timer
    });

    // Assert
    expect(getByText(/happy birthday john!/i)).toBeInTheDocument();
  });

  test('handles invalid dates gracefully', () => {
    // Arrange & Act
    const { getByText } = render(<Birthday name="John" day={32} month={13} />);
    
    // Assert
    expect(getByText(/invalid date/i)).toBeInTheDocument();
  });
});

