// ********RoostGPT********
// Test generated by RoostGPT for test react-bday using AI Type Open AI and AI Model gpt-4-1106-preview



// ********RoostGPT********
import React from 'react';
import { render } from '@testing-library/react';
import Countdown from '../../src/Countdown'; // Considering the test file location in __tests__/src
import Wish from '../../src/Wish';

// Mocking Wish component to prevent actual rendering
jest.mock('../../src/Wish', () => {
  return ({ name }) => (<div data-testid="mock-wish">Happy Birthday {name}!</div>);
});

describe('Countdown Component', () => {
  // Test to ensure Countdown component renders non-birthday countdown correctly
  test('renders countdown correctly when it is not the birthday', () => {
    const countdownData = {
      isItBday: false,
      days: 10,
      hours: 20,
      minutes: 30,
      seconds: 40,
    };
    const { getByText } = render(<Countdown countdownData={countdownData} name="John Doe" />);

    expect(getByText(/countdown to/i)).toBeInTheDocument();
    expect(getByText('10')).toBeInTheDocument();
    expect(getByText('Days')).toBeInTheDocument();
    expect(getByText('20')).toBeInTheDocument();
    expect(getByText('Hours')).toBeInTheDocument();
    expect(getByText('30')).toBeInTheDocument();
    expect(getByText('Minutes')).toBeInTheDocument();
    expect(getByText('40')).toBeInTheDocument();
    expect(getByText('Seconds')).toBeInTheDocument();
  });

  // Test to ensure Countdown component renders the Wish component when it is the birthday
  test('renders Wish component when it is the birthday', () => {
    const countdownData = {
      isItBday: true,
      days: 0,
      hours: 0,
      minutes: 0,
      seconds: 0,
    };
    const { getByTestId } = render(<Countdown countdownData={countdownData} name="Jane Smith" />);

    const wishComponent = getByTestId('mock-wish');
    expect(wishComponent).toBeInTheDocument();
    expect(wishComponent).toHaveTextContent('Happy Birthday Jane Smith!');
  });

  // Additional tests can be written here to handle edge cases and error conditions
});

