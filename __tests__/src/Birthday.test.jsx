// ********RoostGPT********
// Test generated by RoostGPT for test react-bday using AI Type Open AI and AI Model gpt-4-1106-preview



// ********RoostGPT********
// __tests__/src/Birthday.test.jsx

import React from 'react';
import { render, screen, cleanup } from '@testing-library/react';
import '@testing-library/jest-dom/extend-expect';
import Birthday from '../../src/Birthday';

// Assure that each test runs with a clean slate
afterEach(cleanup);

describe('Birthday Component', () => {
  test('renders with default props', () => {
    render(<Birthday />);
    const defaultName = screen.getByText(/deepankar/i);
    expect(defaultName).toBeInTheDocument();
  });

  test('renders with given props', () => {
    const mockName = 'John';
    const mockDay = 15;
    const mockMonth = 8; // August
    render(<Birthday name={mockName} day={mockDay} month={mockMonth} />);
    const displayName = screen.getByText(new RegExp(mockName, 'i'));
    const displayDate = screen.getByText(`${mockDay} August`);
    expect(displayName).toBeInTheDocument();
    expect(displayDate).toBeInTheDocument();
  });

  test('displays countdown timer when it is not the birthday', () => {
    // This assumes the current date is not the birthday date
    render(<Birthday name="Alice" day={24} month={12} />);
    const countdown = screen.getByTestId('countdown-timer');
    expect(countdown).toBeInTheDocument();
  });

  test('displays birthday message when it is the birthday', () => {
    // Use the mock date where the current date is the birthday
    jest.useFakeTimers().setSystemTime(new Date('2023-06-14').getTime());
    render(<Birthday name="Deepankar" day={14} month={6} />);
    const birthdayMessage = screen.getByTestId('birthday-message');
    expect(birthdayMessage).toBeInTheDocument();
    jest.useRealTimers();
  });

  test('contains link to generate new countdown when it is not the birthday', () => {
    render(<Birthday name="Bob" day={1} month={1} />);
    const generateLink = screen.getByRole('link', { name: /generate here/i });
    expect(generateLink).toBeInTheDocument();
  });
});

